/**
* Payrobot
* # Introduction Accept, store, send or forward Bitcoin, Litecoin and Bitcoin Cash for your website or app and protect your privacy.  Supported crytocurrencies:   * BTC Bitcoin   * LTC Litecoin   * BCH Bitcoin Cash   ## Benefits    * **Anonymous** No personal details are required and transactions are mixed among all payments. You can forward your payments so as soon payrobot.io receives it forwards it to another address under your control.      * **No Registration** No registration, sign-up, application or form required to use payrobot.io      * **Easy Integration** Integrate your web / app through our simple RESTful API, you can accept payments with just one line of code!      * **Instant Payment Notification** Our servers notify your web / app the status of your payments. No polling, daemons or cronjobs required on your side!      * **Secure** Payrobot.io works with SSL and bank-level security protocols. Your transactions are safe!   ## Features **Payment Forward** Generate one-time addresses to recieve payments. Payrobot will notify your web /app through callbacks (webhooks) the status of the payment. As soon as it's confirmed the payment is forwarded to your desired address.  **Wallet** Receive, send payments and store your coins in a secure, private and anonymous wallet. All events are notified to your web / app through callbacks (webhooks). You can generate wallets with just one line of code without registration or further information  ## Fees **Only 0.90% per inbound transaction** (receive payments), NO HIDDEN FEES. All outbound transactions (send funds) are totally free.  Minimum fees applies, therefore the largest amount is going to be considered as fee either: `(inboundAmount*feePct)` or `the minimum fee`  **Inbound Fees (Receive payments)**    - `Bitcoin` 0.90% *(Minimum fee 0.00005 BTC)*   - `Litecoin` 0.90% *(Minimum fee 0.0005 LTC)*   - `Bitcoin Cash` 0.90% *(Minimum fee 0.0005 BCH)*     **Outbound Fees (Send funds)**    - `Bitcoin` 0.00%   - `Litecoin` 0.00%   - `Bitcoin Cash` 0.00%   ## Rate Limit To guarantee the good performance of the service and its fair use. The API is **limited to receiving 120 requests per minute per IP**, which is sufficient for most use cases.  Payrobot.io is asynchronous in most API methods to communicate with your application through callbacks (webhooks), thus reducing unnecessary calls to the service.  **If the limit is exceeded, the IP will be banned for 1 minute.**  If you require an upper limit for your application, do not hesitate to contact us  ## Considerations    * Amounts in responses are expresed as `strings`      * Wallets are not multi-currency, you have to create a different wallet per cryptocurrency (You can't store Litecoin in a Bitcoin wallet and vice-versa)      * Payment forwarding has to be of the same type of currency (You can't forward a Bitcoin Cash payment to a Bitcoin address and vice-versa)    
*
* The version of the OpenAPI document: 1.0
* Contact: contact@payrobot.io
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package payrobot.models

import payrobot.models.AddressDetail
import payrobot.models.CryptoCurrency

import com.squareup.moshi.Json
/**
 * 
 * @param currency 
 * @param walletId Unique ID of the new created Wallet
 * @param requestId ID of this transaction, it can be used letter in the callback or to query it
 * @param timestamp Request creation date expressed in UNIX timestamp
 * @param lastupdate Last update expressed in UNIX timestamp
 * @param amount Total amount sent from wallet
 * @param callback Optional callback to notify your web / app as soon as the send request has been fully broadcasted to the network
 * @param destination Array with all the destination coin addres(es) and the amount(s) to send 
 * @param txid Tx Hash. *Only available in requests with confirmed status* 
 * @param status Status of this send request:   * `0: Queued` Request has been queued for broadcasting. It usually takes few seconds under normal conditions   * `1: Broadcasted` Request has been fully broadcasted to Bitcoin Network  
 * @param error `true` is there was a problem. `false` if not 
 */

data class WalletSendRequest (
    @Json(name = "currency")
    val currency: CryptoCurrency? = null,
    /* Unique ID of the new created Wallet */
    @Json(name = "walletId")
    val walletId: kotlin.String? = null,
    /* ID of this transaction, it can be used letter in the callback or to query it */
    @Json(name = "requestId")
    val requestId: kotlin.String? = null,
    /* Request creation date expressed in UNIX timestamp */
    @Json(name = "timestamp")
    val timestamp: kotlin.Int? = null,
    /* Last update expressed in UNIX timestamp */
    @Json(name = "lastupdate")
    val lastupdate: kotlin.Int? = null,
    /* Total amount sent from wallet */
    @Json(name = "amount")
    val amount: kotlin.String? = null,
    /* Optional callback to notify your web / app as soon as the send request has been fully broadcasted to the network */
    @Json(name = "callback")
    val callback: kotlin.String? = null,
    /* Array with all the destination coin addres(es) and the amount(s) to send  */
    @Json(name = "destination")
    val destination: kotlin.Array<AddressDetail>? = null,
    /* Tx Hash. *Only available in requests with confirmed status*  */
    @Json(name = "txid")
    val txid: kotlin.String? = null,
    /* Status of this send request:   * `0: Queued` Request has been queued for broadcasting. It usually takes few seconds under normal conditions   * `1: Broadcasted` Request has been fully broadcasted to Bitcoin Network   */
    @Json(name = "status")
    val status: kotlin.Int? = null,
    /* `true` is there was a problem. `false` if not  */
    @Json(name = "error")
    val error: kotlin.Boolean? = null
)

